/* tslint:disable */
/* eslint-disable */
/**
 * Dev FastAPI example application
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BodyUpdateUserMeApiV1UsersMePut
 */
export interface BodyUpdateUserMeApiV1UsersMePut {
    /**
     * 
     * @type {string}
     * @memberof BodyUpdateUserMeApiV1UsersMePut
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof BodyUpdateUserMeApiV1UsersMePut
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface Campus
 */
export interface Campus {
    /**
     * 
     * @type {string}
     * @memberof Campus
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof Campus
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface CampusCreate
 */
export interface CampusCreate {
    /**
     * 
     * @type {string}
     * @memberof CampusCreate
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof CampusCreate
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface CampusUpdate
 */
export interface CampusUpdate {
    /**
     * 
     * @type {string}
     * @memberof CampusUpdate
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface Discipline
 */
export interface Discipline {
    /**
     * 
     * @type {string}
     * @memberof Discipline
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof Discipline
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface DisciplineCreate
 */
export interface DisciplineCreate {
    /**
     * 
     * @type {string}
     * @memberof DisciplineCreate
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface DisciplineUpdate
 */
export interface DisciplineUpdate {
    /**
     * 
     * @type {string}
     * @memberof DisciplineUpdate
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'errors'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Msg
 */
export interface Msg {
    /**
     * 
     * @type {string}
     * @memberof Msg
     */
    'msg': string;
}
/**
 * 
 * @export
 * @interface Student
 */
export interface Student {
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'study_group_cipher_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'role'?: string;
    /**
     * 
     * @type {number}
     * @memberof Student
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface StudentTask
 */
export interface StudentTask {
    /**
     * 
     * @type {number}
     * @memberof StudentTask
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof StudentTask
     */
    'student_id': number;
    /**
     * 
     * @type {string}
     * @memberof StudentTask
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof StudentTask
     */
    'priority': string;
    /**
     * 
     * @type {number}
     * @memberof StudentTask
     */
    'points'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentTask
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTask
     */
    'feedback'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTask
     */
    'grade'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTask
     */
    'deadline_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTask
     */
    'completion_date'?: string;
}
/**
 * 
 * @export
 * @interface StudentTaskCreate
 */
export interface StudentTaskCreate {
    /**
     * 
     * @type {number}
     * @memberof StudentTaskCreate
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof StudentTaskCreate
     */
    'student_id': number;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskCreate
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskCreate
     */
    'priority': string;
    /**
     * 
     * @type {number}
     * @memberof StudentTaskCreate
     */
    'points'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskCreate
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskCreate
     */
    'feedback'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskCreate
     */
    'grade'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskCreate
     */
    'deadline_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskCreate
     */
    'completion_date'?: string;
}
/**
 * 
 * @export
 * @interface StudentTaskStore
 */
export interface StudentTaskStore {
    /**
     * 
     * @type {number}
     * @memberof StudentTaskStore
     */
    'task_id': number;
    /**
     * 
     * @type {number}
     * @memberof StudentTaskStore
     */
    'student_id': number;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskStore
     */
    'url': string;
    /**
     * 
     * @type {number}
     * @memberof StudentTaskStore
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskStore
     */
    'filename'?: string;
    /**
     * 
     * @type {number}
     * @memberof StudentTaskStore
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface StudentTaskStoreCreate
 */
export interface StudentTaskStoreCreate {
    /**
     * 
     * @type {number}
     * @memberof StudentTaskStoreCreate
     */
    'task_id': number;
    /**
     * 
     * @type {number}
     * @memberof StudentTaskStoreCreate
     */
    'student_id': number;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskStoreCreate
     */
    'url': string;
    /**
     * 
     * @type {number}
     * @memberof StudentTaskStoreCreate
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskStoreCreate
     */
    'filename'?: string;
}
/**
 * 
 * @export
 * @interface StudentTaskStoreUpdate
 */
export interface StudentTaskStoreUpdate {
    /**
     * 
     * @type {number}
     * @memberof StudentTaskStoreUpdate
     */
    'task_id': number;
    /**
     * 
     * @type {number}
     * @memberof StudentTaskStoreUpdate
     */
    'student_id': number;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskStoreUpdate
     */
    'url': string;
    /**
     * 
     * @type {number}
     * @memberof StudentTaskStoreUpdate
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskStoreUpdate
     */
    'filename'?: string;
}
/**
 * 
 * @export
 * @interface StudentTaskUpdate
 */
export interface StudentTaskUpdate {
    /**
     * 
     * @type {number}
     * @memberof StudentTaskUpdate
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof StudentTaskUpdate
     */
    'student_id': number;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskUpdate
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskUpdate
     */
    'priority': string;
    /**
     * 
     * @type {number}
     * @memberof StudentTaskUpdate
     */
    'points'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskUpdate
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskUpdate
     */
    'feedback'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskUpdate
     */
    'grade'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskUpdate
     */
    'deadline_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTaskUpdate
     */
    'completion_date'?: string;
}
/**
 * 
 * @export
 * @interface StudentUpdate
 */
export interface StudentUpdate {
    /**
     * 
     * @type {string}
     * @memberof StudentUpdate
     */
    'study_group_cipher_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentUpdate
     */
    'role'?: string;
    /**
     * 
     * @type {number}
     * @memberof StudentUpdate
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface StudyGroup
 */
export interface StudyGroup {
    /**
     * 
     * @type {string}
     * @memberof StudyGroup
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof StudyGroup
     */
    'discipline_id': number;
}
/**
 * 
 * @export
 * @interface StudyGroupCipher
 */
export interface StudyGroupCipher {
    /**
     * 
     * @type {string}
     * @memberof StudyGroupCipher
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface StudyGroupCipherCreate
 */
export interface StudyGroupCipherCreate {
    /**
     * 
     * @type {string}
     * @memberof StudyGroupCipherCreate
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface StudyGroupCipherUpdate
 */
export interface StudyGroupCipherUpdate {
    /**
     * 
     * @type {string}
     * @memberof StudyGroupCipherUpdate
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface StudyGroupCreate
 */
export interface StudyGroupCreate {
    /**
     * 
     * @type {string}
     * @memberof StudyGroupCreate
     */
    'id': string;
    /**
     * 
     * @type {number | Array<number>}
     * @memberof StudyGroupCreate
     */
    'discipline_id': number | Array<number>;
}
/**
 * 
 * @export
 * @interface StudyGroupTask
 */
export interface StudyGroupTask {
    /**
     * 
     * @type {number}
     * @memberof StudyGroupTask
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudyGroupTask
     */
    'study_group_cipher_id': string;
    /**
     * 
     * @type {string}
     * @memberof StudyGroupTask
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof StudyGroupTask
     */
    'deadline_date'?: string;
}
/**
 * 
 * @export
 * @interface StudyGroupTaskUpdate
 */
export interface StudyGroupTaskUpdate {
    /**
     * 
     * @type {number}
     * @memberof StudyGroupTaskUpdate
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof StudyGroupTaskUpdate
     */
    'study_group_cipher_id': string;
    /**
     * 
     * @type {string}
     * @memberof StudyGroupTaskUpdate
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof StudyGroupTaskUpdate
     */
    'deadline_date'?: string;
}
/**
 * 
 * @export
 * @interface StudyGroupUpdate
 */
export interface StudyGroupUpdate {
    /**
     * 
     * @type {string}
     * @memberof StudyGroupUpdate
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof StudyGroupUpdate
     */
    'discipline_id': number;
}
/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    'teacher_user_id': number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'teacher_role': string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    'teacher_discipline_id': number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'create_date'?: string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface TaskCreate
 */
export interface TaskCreate {
    /**
     * 
     * @type {number}
     * @memberof TaskCreate
     */
    'teacher_user_id': number;
    /**
     * 
     * @type {string}
     * @memberof TaskCreate
     */
    'teacher_role': string;
    /**
     * 
     * @type {number}
     * @memberof TaskCreate
     */
    'teacher_discipline_id': number;
    /**
     * 
     * @type {string}
     * @memberof TaskCreate
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TaskCreate
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskCreate
     */
    'create_date'?: string;
}
/**
 * 
 * @export
 * @interface TaskUpdate
 */
export interface TaskUpdate {
    /**
     * 
     * @type {number}
     * @memberof TaskUpdate
     */
    'teacher_user_id': number;
    /**
     * 
     * @type {string}
     * @memberof TaskUpdate
     */
    'teacher_role': string;
    /**
     * 
     * @type {number}
     * @memberof TaskUpdate
     */
    'teacher_discipline_id': number;
    /**
     * 
     * @type {string}
     * @memberof TaskUpdate
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TaskUpdate
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskUpdate
     */
    'create_date'?: string;
}
/**
 * 
 * @export
 * @interface Teacher
 */
export interface Teacher {
    /**
     * 
     * @type {number}
     * @memberof Teacher
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'role': string;
    /**
     * 
     * @type {number | Array<any>}
     * @memberof Teacher
     */
    'discipline_id': number | Array<any>;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'room_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'campus_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Teacher
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface TeacherUpdate
 */
export interface TeacherUpdate {
    /**
     * 
     * @type {number}
     * @memberof TeacherUpdate
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdate
     */
    'role': string;
    /**
     * 
     * @type {number | Array<any>}
     * @memberof TeacherUpdate
     */
    'discipline_id': number | Array<any>;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdate
     */
    'room_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeacherUpdate
     */
    'campus_id'?: string;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'access_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'expires_delta'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'token_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'sub'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Token
     */
    'scopes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string;
    /**
     * 
     * @type {UserRole | string}
     * @memberof User
     */
    'role'?: UserRole | string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'full_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phone'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'is_superuser'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'username'?: string;
    /**
     * 
     * @type {UserRole | string}
     * @memberof UserCreate
     */
    'role'?: UserRole | string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'full_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserCreate
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'phone'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserCreate
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserCreate
     */
    'is_superuser'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'password_confirm': string;
}
/**
 * 
 * @export
 * @interface UserCreateOpen
 */
export interface UserCreateOpen {
    /**
     * 
     * @type {string}
     * @memberof UserCreateOpen
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateOpen
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateOpen
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateOpen
     */
    'password_confirm': string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum UserRole {
    Admin = 'admin',
    User = 'user',
    Student = 'student',
    Teacher = 'teacher'
}

/**
 * 
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'username'?: string;
    /**
     * 
     * @type {UserRole | string}
     * @memberof UserUpdate
     */
    'role'?: UserRole | string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'full_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserUpdate
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'phone'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserUpdate
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserUpdate
     */
    'is_superuser'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'password_confirm': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string | number>}
     * @memberof ValidationError
     */
    'loc': Array<string | number>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * CampusesApi - axios parameter creator
 * @export
 */
export const CampusesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new Campus.
         * @summary Create Campus
         * @param {CampusCreate} campusCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampusApiV1CampusesPost: async (campusCreate: CampusCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campusCreate' is not null or undefined
            assertParamExists('createCampusApiV1CampusesPost', 'campusCreate', campusCreate)
            const localVarPath = `/api/v1/campuses/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campusCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Campus.
         * @summary Delete Campus Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampusIdApiV1CampusesIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCampusIdApiV1CampusesIdDelete', 'id', id)
            const localVarPath = `/api/v1/campuses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Campus by ID.
         * @summary Read Campus Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCampusIdApiV1CampusesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readCampusIdApiV1CampusesIdGet', 'id', id)
            const localVarPath = `/api/v1/campuses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve Campuss.
         * @summary Read Campuss
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCampussApiV1CampusesGet: async (sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/campuses/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an Campus.
         * @summary Update Campus Id
         * @param {number} id 
         * @param {CampusUpdate} campusUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampusIdApiV1CampusesIdPut: async (id: number, campusUpdate: CampusUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCampusIdApiV1CampusesIdPut', 'id', id)
            // verify required parameter 'campusUpdate' is not null or undefined
            assertParamExists('updateCampusIdApiV1CampusesIdPut', 'campusUpdate', campusUpdate)
            const localVarPath = `/api/v1/campuses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campusUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampusesApi - functional programming interface
 * @export
 */
export const CampusesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampusesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new Campus.
         * @summary Create Campus
         * @param {CampusCreate} campusCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampusApiV1CampusesPost(campusCreate: CampusCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCampusApiV1CampusesPost(campusCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an Campus.
         * @summary Delete Campus Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCampusIdApiV1CampusesIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCampusIdApiV1CampusesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Campus by ID.
         * @summary Read Campus Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readCampusIdApiV1CampusesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readCampusIdApiV1CampusesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve Campuss.
         * @summary Read Campuss
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readCampussApiV1CampusesGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Campus>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readCampussApiV1CampusesGet(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an Campus.
         * @summary Update Campus Id
         * @param {number} id 
         * @param {CampusUpdate} campusUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCampusIdApiV1CampusesIdPut(id: number, campusUpdate: CampusUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCampusIdApiV1CampusesIdPut(id, campusUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CampusesApi - factory interface
 * @export
 */
export const CampusesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampusesApiFp(configuration)
    return {
        /**
         * Create new Campus.
         * @summary Create Campus
         * @param {CampusCreate} campusCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampusApiV1CampusesPost(campusCreate: CampusCreate, options?: any): AxiosPromise<Campus> {
            return localVarFp.createCampusApiV1CampusesPost(campusCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Campus.
         * @summary Delete Campus Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampusIdApiV1CampusesIdDelete(id: number, options?: any): AxiosPromise<Campus> {
            return localVarFp.deleteCampusIdApiV1CampusesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Campus by ID.
         * @summary Read Campus Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCampusIdApiV1CampusesIdGet(id: string, options?: any): AxiosPromise<Campus> {
            return localVarFp.readCampusIdApiV1CampusesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve Campuss.
         * @summary Read Campuss
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCampussApiV1CampusesGet(sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<Campus>> {
            return localVarFp.readCampussApiV1CampusesGet(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an Campus.
         * @summary Update Campus Id
         * @param {number} id 
         * @param {CampusUpdate} campusUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampusIdApiV1CampusesIdPut(id: number, campusUpdate: CampusUpdate, options?: any): AxiosPromise<Campus> {
            return localVarFp.updateCampusIdApiV1CampusesIdPut(id, campusUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CampusesApi - object-oriented interface
 * @export
 * @class CampusesApi
 * @extends {BaseAPI}
 */
export class CampusesApi extends BaseAPI {
    /**
     * Create new Campus.
     * @summary Create Campus
     * @param {CampusCreate} campusCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampusesApi
     */
    public createCampusApiV1CampusesPost(campusCreate: CampusCreate, options?: AxiosRequestConfig) {
        return CampusesApiFp(this.configuration).createCampusApiV1CampusesPost(campusCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Campus.
     * @summary Delete Campus Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampusesApi
     */
    public deleteCampusIdApiV1CampusesIdDelete(id: number, options?: AxiosRequestConfig) {
        return CampusesApiFp(this.configuration).deleteCampusIdApiV1CampusesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Campus by ID.
     * @summary Read Campus Id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampusesApi
     */
    public readCampusIdApiV1CampusesIdGet(id: string, options?: AxiosRequestConfig) {
        return CampusesApiFp(this.configuration).readCampusIdApiV1CampusesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve Campuss.
     * @summary Read Campuss
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampusesApi
     */
    public readCampussApiV1CampusesGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
        return CampusesApiFp(this.configuration).readCampussApiV1CampusesGet(sort, range, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an Campus.
     * @summary Update Campus Id
     * @param {number} id 
     * @param {CampusUpdate} campusUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampusesApi
     */
    public updateCampusIdApiV1CampusesIdPut(id: number, campusUpdate: CampusUpdate, options?: AxiosRequestConfig) {
        return CampusesApiFp(this.configuration).updateCampusIdApiV1CampusesIdPut(id, campusUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ClassifiersApi - axios parameter creator
 * @export
 */
export const ClassifiersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read Classifiers
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassifiersApiV1ClassifiersNameGet: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('readClassifiersApiV1ClassifiersNameGet', 'name', name)
            const localVarPath = `/api/v1/classifiers/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Classifiers Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassifiersKeysApiV1ClassifiersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/classifiers/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClassifiersApi - functional programming interface
 * @export
 */
export const ClassifiersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClassifiersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read Classifiers
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readClassifiersApiV1ClassifiersNameGet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readClassifiersApiV1ClassifiersNameGet(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read Classifiers Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readClassifiersKeysApiV1ClassifiersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readClassifiersKeysApiV1ClassifiersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClassifiersApi - factory interface
 * @export
 */
export const ClassifiersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClassifiersApiFp(configuration)
    return {
        /**
         * 
         * @summary Read Classifiers
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassifiersApiV1ClassifiersNameGet(name: string, options?: any): AxiosPromise<any> {
            return localVarFp.readClassifiersApiV1ClassifiersNameGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Classifiers Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassifiersKeysApiV1ClassifiersGet(options?: any): AxiosPromise<any> {
            return localVarFp.readClassifiersKeysApiV1ClassifiersGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClassifiersApi - object-oriented interface
 * @export
 * @class ClassifiersApi
 * @extends {BaseAPI}
 */
export class ClassifiersApi extends BaseAPI {
    /**
     * 
     * @summary Read Classifiers
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassifiersApi
     */
    public readClassifiersApiV1ClassifiersNameGet(name: string, options?: AxiosRequestConfig) {
        return ClassifiersApiFp(this.configuration).readClassifiersApiV1ClassifiersNameGet(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Classifiers Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassifiersApi
     */
    public readClassifiersKeysApiV1ClassifiersGet(options?: AxiosRequestConfig) {
        return ClassifiersApiFp(this.configuration).readClassifiersKeysApiV1ClassifiersGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DisciplinesApi - axios parameter creator
 * @export
 */
export const DisciplinesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new Discipline.
         * @summary Create Discipline
         * @param {DisciplineCreate} disciplineCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDisciplineApiV1DisciplinesPost: async (disciplineCreate: DisciplineCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'disciplineCreate' is not null or undefined
            assertParamExists('createDisciplineApiV1DisciplinesPost', 'disciplineCreate', disciplineCreate)
            const localVarPath = `/api/v1/disciplines/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(disciplineCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Discipline.
         * @summary Delete Discipline Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDisciplineIdApiV1DisciplinesIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDisciplineIdApiV1DisciplinesIdDelete', 'id', id)
            const localVarPath = `/api/v1/disciplines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Discipline by ID.
         * @summary Read Discipline Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDisciplineIdApiV1DisciplinesIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readDisciplineIdApiV1DisciplinesIdGet', 'id', id)
            const localVarPath = `/api/v1/disciplines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve Tasks.
         * @summary Read Disciplines
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDisciplinesApiV1DisciplinesGet: async (sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/disciplines/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an Discipline.
         * @summary Update Discipline Id
         * @param {number} id 
         * @param {DisciplineUpdate} disciplineUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDisciplineIdApiV1DisciplinesIdPut: async (id: number, disciplineUpdate: DisciplineUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDisciplineIdApiV1DisciplinesIdPut', 'id', id)
            // verify required parameter 'disciplineUpdate' is not null or undefined
            assertParamExists('updateDisciplineIdApiV1DisciplinesIdPut', 'disciplineUpdate', disciplineUpdate)
            const localVarPath = `/api/v1/disciplines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(disciplineUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DisciplinesApi - functional programming interface
 * @export
 */
export const DisciplinesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DisciplinesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new Discipline.
         * @summary Create Discipline
         * @param {DisciplineCreate} disciplineCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDisciplineApiV1DisciplinesPost(disciplineCreate: DisciplineCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Discipline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDisciplineApiV1DisciplinesPost(disciplineCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an Discipline.
         * @summary Delete Discipline Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDisciplineIdApiV1DisciplinesIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Discipline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDisciplineIdApiV1DisciplinesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Discipline by ID.
         * @summary Read Discipline Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readDisciplineIdApiV1DisciplinesIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Discipline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readDisciplineIdApiV1DisciplinesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve Tasks.
         * @summary Read Disciplines
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readDisciplinesApiV1DisciplinesGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Discipline>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readDisciplinesApiV1DisciplinesGet(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an Discipline.
         * @summary Update Discipline Id
         * @param {number} id 
         * @param {DisciplineUpdate} disciplineUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDisciplineIdApiV1DisciplinesIdPut(id: number, disciplineUpdate: DisciplineUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Discipline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDisciplineIdApiV1DisciplinesIdPut(id, disciplineUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DisciplinesApi - factory interface
 * @export
 */
export const DisciplinesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DisciplinesApiFp(configuration)
    return {
        /**
         * Create new Discipline.
         * @summary Create Discipline
         * @param {DisciplineCreate} disciplineCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDisciplineApiV1DisciplinesPost(disciplineCreate: DisciplineCreate, options?: any): AxiosPromise<Discipline> {
            return localVarFp.createDisciplineApiV1DisciplinesPost(disciplineCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Discipline.
         * @summary Delete Discipline Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDisciplineIdApiV1DisciplinesIdDelete(id: number, options?: any): AxiosPromise<Discipline> {
            return localVarFp.deleteDisciplineIdApiV1DisciplinesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Discipline by ID.
         * @summary Read Discipline Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDisciplineIdApiV1DisciplinesIdGet(id: number, options?: any): AxiosPromise<Discipline> {
            return localVarFp.readDisciplineIdApiV1DisciplinesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve Tasks.
         * @summary Read Disciplines
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readDisciplinesApiV1DisciplinesGet(sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<Discipline>> {
            return localVarFp.readDisciplinesApiV1DisciplinesGet(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an Discipline.
         * @summary Update Discipline Id
         * @param {number} id 
         * @param {DisciplineUpdate} disciplineUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDisciplineIdApiV1DisciplinesIdPut(id: number, disciplineUpdate: DisciplineUpdate, options?: any): AxiosPromise<Discipline> {
            return localVarFp.updateDisciplineIdApiV1DisciplinesIdPut(id, disciplineUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DisciplinesApi - object-oriented interface
 * @export
 * @class DisciplinesApi
 * @extends {BaseAPI}
 */
export class DisciplinesApi extends BaseAPI {
    /**
     * Create new Discipline.
     * @summary Create Discipline
     * @param {DisciplineCreate} disciplineCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisciplinesApi
     */
    public createDisciplineApiV1DisciplinesPost(disciplineCreate: DisciplineCreate, options?: AxiosRequestConfig) {
        return DisciplinesApiFp(this.configuration).createDisciplineApiV1DisciplinesPost(disciplineCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Discipline.
     * @summary Delete Discipline Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisciplinesApi
     */
    public deleteDisciplineIdApiV1DisciplinesIdDelete(id: number, options?: AxiosRequestConfig) {
        return DisciplinesApiFp(this.configuration).deleteDisciplineIdApiV1DisciplinesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Discipline by ID.
     * @summary Read Discipline Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisciplinesApi
     */
    public readDisciplineIdApiV1DisciplinesIdGet(id: number, options?: AxiosRequestConfig) {
        return DisciplinesApiFp(this.configuration).readDisciplineIdApiV1DisciplinesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve Tasks.
     * @summary Read Disciplines
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisciplinesApi
     */
    public readDisciplinesApiV1DisciplinesGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
        return DisciplinesApiFp(this.configuration).readDisciplinesApiV1DisciplinesGet(sort, range, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an Discipline.
     * @summary Update Discipline Id
     * @param {number} id 
     * @param {DisciplineUpdate} disciplineUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisciplinesApi
     */
    public updateDisciplineIdApiV1DisciplinesIdPut(id: number, disciplineUpdate: DisciplineUpdate, options?: AxiosRequestConfig) {
        return DisciplinesApiFp(this.configuration).updateDisciplineIdApiV1DisciplinesIdPut(id, disciplineUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OAuth2 compatible token login, get an access token for future requests
         * @summary Login Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAccessTokenApiV1LoginAccessTokenPost: async (username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginAccessTokenApiV1LoginAccessTokenPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginAccessTokenApiV1LoginAccessTokenPost', 'password', password)
            const localVarPath = `/api/v1/login/access-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * logout
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutApiV1LogoutGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test access token
         * @summary Test Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTokenApiV1LoginTestTokenPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/login/test-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * OAuth2 compatible token login, get an access token for future requests
         * @summary Login Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAccessTokenApiV1LoginAccessTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAccessTokenApiV1LoginAccessTokenPost(username, password, grantType, scope, clientId, clientSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * logout
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutApiV1LogoutGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutApiV1LogoutGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Test access token
         * @summary Test Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testTokenApiV1LoginTestTokenPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testTokenApiV1LoginTestTokenPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * OAuth2 compatible token login, get an access token for future requests
         * @summary Login Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAccessTokenApiV1LoginAccessTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any): AxiosPromise<Token> {
            return localVarFp.loginAccessTokenApiV1LoginAccessTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * logout
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutApiV1LogoutGet(options?: any): AxiosPromise<any> {
            return localVarFp.logoutApiV1LogoutGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Test access token
         * @summary Test Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTokenApiV1LoginTestTokenPost(options?: any): AxiosPromise<User> {
            return localVarFp.testTokenApiV1LoginTestTokenPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * OAuth2 compatible token login, get an access token for future requests
     * @summary Login Access Token
     * @param {string} username 
     * @param {string} password 
     * @param {string} [grantType] 
     * @param {string} [scope] 
     * @param {string} [clientId] 
     * @param {string} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public loginAccessTokenApiV1LoginAccessTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).loginAccessTokenApiV1LoginAccessTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * logout
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public logoutApiV1LogoutGet(options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).logoutApiV1LogoutGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test access token
     * @summary Test Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public testTokenApiV1LoginTestTokenPost(options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).testTokenApiV1LoginTestTokenPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SignupApi - axios parameter creator
 * @export
 */
export const SignupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Signup
         * @param {UserCreateOpen} userCreateOpen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupApiV1SignupPost: async (userCreateOpen: UserCreateOpen, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateOpen' is not null or undefined
            assertParamExists('signupApiV1SignupPost', 'userCreateOpen', userCreateOpen)
            const localVarPath = `/api/v1/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateOpen, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignupApi - functional programming interface
 * @export
 */
export const SignupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Signup
         * @param {UserCreateOpen} userCreateOpen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signupApiV1SignupPost(userCreateOpen: UserCreateOpen, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signupApiV1SignupPost(userCreateOpen, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignupApi - factory interface
 * @export
 */
export const SignupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignupApiFp(configuration)
    return {
        /**
         * 
         * @summary Signup
         * @param {UserCreateOpen} userCreateOpen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupApiV1SignupPost(userCreateOpen: UserCreateOpen, options?: any): AxiosPromise<User> {
            return localVarFp.signupApiV1SignupPost(userCreateOpen, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignupApi - object-oriented interface
 * @export
 * @class SignupApi
 * @extends {BaseAPI}
 */
export class SignupApi extends BaseAPI {
    /**
     * 
     * @summary Signup
     * @param {UserCreateOpen} userCreateOpen 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignupApi
     */
    public signupApiV1SignupPost(userCreateOpen: UserCreateOpen, options?: AxiosRequestConfig) {
        return SignupApiFp(this.configuration).signupApiV1SignupPost(userCreateOpen, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudentTaskStoresApi - axios parameter creator
 * @export
 */
export const StudentTaskStoresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new task_store.
         * @summary Create Task Store
         * @param {StudentTaskStoreCreate} studentTaskStoreCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskStoreApiV1StudentTaskStoresPost: async (studentTaskStoreCreate: StudentTaskStoreCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentTaskStoreCreate' is not null or undefined
            assertParamExists('createTaskStoreApiV1StudentTaskStoresPost', 'studentTaskStoreCreate', studentTaskStoreCreate)
            const localVarPath = `/api/v1/student_task_stores/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentTaskStoreCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an task_store.
         * @summary Delete Task Store
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskStoreApiV1StudentTaskStoresIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTaskStoreApiV1StudentTaskStoresIdDelete', 'id', id)
            const localVarPath = `/api/v1/student_task_stores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get task_store by ID.
         * @summary Read Task Store
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTaskStoreApiV1StudentTaskStoresIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readTaskStoreApiV1StudentTaskStoresIdGet', 'id', id)
            const localVarPath = `/api/v1/student_task_stores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve StudentTaskStores.
         * @summary Read Task Stores
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTaskStoresApiV1StudentTaskStoresGet: async (sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/student_task_stores/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an task_store.
         * @summary Update Task Store
         * @param {number} id 
         * @param {StudentTaskStoreUpdate} studentTaskStoreUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskStoreApiV1StudentTaskStoresIdPut: async (id: number, studentTaskStoreUpdate: StudentTaskStoreUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTaskStoreApiV1StudentTaskStoresIdPut', 'id', id)
            // verify required parameter 'studentTaskStoreUpdate' is not null or undefined
            assertParamExists('updateTaskStoreApiV1StudentTaskStoresIdPut', 'studentTaskStoreUpdate', studentTaskStoreUpdate)
            const localVarPath = `/api/v1/student_task_stores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentTaskStoreUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentTaskStoresApi - functional programming interface
 * @export
 */
export const StudentTaskStoresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentTaskStoresApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new task_store.
         * @summary Create Task Store
         * @param {StudentTaskStoreCreate} studentTaskStoreCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskStoreApiV1StudentTaskStoresPost(studentTaskStoreCreate: StudentTaskStoreCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentTaskStore>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTaskStoreApiV1StudentTaskStoresPost(studentTaskStoreCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an task_store.
         * @summary Delete Task Store
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskStoreApiV1StudentTaskStoresIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentTaskStore>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTaskStoreApiV1StudentTaskStoresIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get task_store by ID.
         * @summary Read Task Store
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readTaskStoreApiV1StudentTaskStoresIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentTaskStore>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readTaskStoreApiV1StudentTaskStoresIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve StudentTaskStores.
         * @summary Read Task Stores
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readTaskStoresApiV1StudentTaskStoresGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudentTaskStore>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readTaskStoresApiV1StudentTaskStoresGet(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an task_store.
         * @summary Update Task Store
         * @param {number} id 
         * @param {StudentTaskStoreUpdate} studentTaskStoreUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTaskStoreApiV1StudentTaskStoresIdPut(id: number, studentTaskStoreUpdate: StudentTaskStoreUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentTaskStore>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTaskStoreApiV1StudentTaskStoresIdPut(id, studentTaskStoreUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudentTaskStoresApi - factory interface
 * @export
 */
export const StudentTaskStoresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentTaskStoresApiFp(configuration)
    return {
        /**
         * Create new task_store.
         * @summary Create Task Store
         * @param {StudentTaskStoreCreate} studentTaskStoreCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskStoreApiV1StudentTaskStoresPost(studentTaskStoreCreate: StudentTaskStoreCreate, options?: any): AxiosPromise<StudentTaskStore> {
            return localVarFp.createTaskStoreApiV1StudentTaskStoresPost(studentTaskStoreCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an task_store.
         * @summary Delete Task Store
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskStoreApiV1StudentTaskStoresIdDelete(id: number, options?: any): AxiosPromise<StudentTaskStore> {
            return localVarFp.deleteTaskStoreApiV1StudentTaskStoresIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get task_store by ID.
         * @summary Read Task Store
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTaskStoreApiV1StudentTaskStoresIdGet(id: number, options?: any): AxiosPromise<StudentTaskStore> {
            return localVarFp.readTaskStoreApiV1StudentTaskStoresIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve StudentTaskStores.
         * @summary Read Task Stores
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTaskStoresApiV1StudentTaskStoresGet(sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<StudentTaskStore>> {
            return localVarFp.readTaskStoresApiV1StudentTaskStoresGet(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an task_store.
         * @summary Update Task Store
         * @param {number} id 
         * @param {StudentTaskStoreUpdate} studentTaskStoreUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskStoreApiV1StudentTaskStoresIdPut(id: number, studentTaskStoreUpdate: StudentTaskStoreUpdate, options?: any): AxiosPromise<StudentTaskStore> {
            return localVarFp.updateTaskStoreApiV1StudentTaskStoresIdPut(id, studentTaskStoreUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentTaskStoresApi - object-oriented interface
 * @export
 * @class StudentTaskStoresApi
 * @extends {BaseAPI}
 */
export class StudentTaskStoresApi extends BaseAPI {
    /**
     * Create new task_store.
     * @summary Create Task Store
     * @param {StudentTaskStoreCreate} studentTaskStoreCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentTaskStoresApi
     */
    public createTaskStoreApiV1StudentTaskStoresPost(studentTaskStoreCreate: StudentTaskStoreCreate, options?: AxiosRequestConfig) {
        return StudentTaskStoresApiFp(this.configuration).createTaskStoreApiV1StudentTaskStoresPost(studentTaskStoreCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an task_store.
     * @summary Delete Task Store
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentTaskStoresApi
     */
    public deleteTaskStoreApiV1StudentTaskStoresIdDelete(id: number, options?: AxiosRequestConfig) {
        return StudentTaskStoresApiFp(this.configuration).deleteTaskStoreApiV1StudentTaskStoresIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get task_store by ID.
     * @summary Read Task Store
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentTaskStoresApi
     */
    public readTaskStoreApiV1StudentTaskStoresIdGet(id: number, options?: AxiosRequestConfig) {
        return StudentTaskStoresApiFp(this.configuration).readTaskStoreApiV1StudentTaskStoresIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve StudentTaskStores.
     * @summary Read Task Stores
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentTaskStoresApi
     */
    public readTaskStoresApiV1StudentTaskStoresGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
        return StudentTaskStoresApiFp(this.configuration).readTaskStoresApiV1StudentTaskStoresGet(sort, range, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an task_store.
     * @summary Update Task Store
     * @param {number} id 
     * @param {StudentTaskStoreUpdate} studentTaskStoreUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentTaskStoresApi
     */
    public updateTaskStoreApiV1StudentTaskStoresIdPut(id: number, studentTaskStoreUpdate: StudentTaskStoreUpdate, options?: AxiosRequestConfig) {
        return StudentTaskStoresApiFp(this.configuration).updateTaskStoreApiV1StudentTaskStoresIdPut(id, studentTaskStoreUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudentTasksApi - axios parameter creator
 * @export
 */
export const StudentTasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new task.
         * @summary Create Task Student
         * @param {StudentTaskCreate} studentTaskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskStudentApiV1StudentTasksPost: async (studentTaskCreate: StudentTaskCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentTaskCreate' is not null or undefined
            assertParamExists('createTaskStudentApiV1StudentTasksPost', 'studentTaskCreate', studentTaskCreate)
            const localVarPath = `/api/v1/student_tasks/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentTaskCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an task.
         * @summary Delete Task Student Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskStudentIdApiV1StudentTasksIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTaskStudentIdApiV1StudentTasksIdDelete', 'id', id)
            const localVarPath = `/api/v1/student_tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get task by ID.
         * @summary Read Task Student Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTaskStudentIdApiV1StudentTasksIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readTaskStudentIdApiV1StudentTasksIdGet', 'id', id)
            const localVarPath = `/api/v1/student_tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve Tasks.
         * @summary Read Task Students
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTaskStudentsApiV1StudentTasksGet: async (sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/student_tasks/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an task.
         * @summary Update Task Student Id
         * @param {number} id 
         * @param {StudentTaskUpdate} studentTaskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskStudentIdApiV1StudentTasksIdPut: async (id: number, studentTaskUpdate: StudentTaskUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTaskStudentIdApiV1StudentTasksIdPut', 'id', id)
            // verify required parameter 'studentTaskUpdate' is not null or undefined
            assertParamExists('updateTaskStudentIdApiV1StudentTasksIdPut', 'studentTaskUpdate', studentTaskUpdate)
            const localVarPath = `/api/v1/student_tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentTaskUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentTasksApi - functional programming interface
 * @export
 */
export const StudentTasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentTasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new task.
         * @summary Create Task Student
         * @param {StudentTaskCreate} studentTaskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskStudentApiV1StudentTasksPost(studentTaskCreate: StudentTaskCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTaskStudentApiV1StudentTasksPost(studentTaskCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an task.
         * @summary Delete Task Student Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskStudentIdApiV1StudentTasksIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTaskStudentIdApiV1StudentTasksIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get task by ID.
         * @summary Read Task Student Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readTaskStudentIdApiV1StudentTasksIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readTaskStudentIdApiV1StudentTasksIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve Tasks.
         * @summary Read Task Students
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readTaskStudentsApiV1StudentTasksGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudentTask>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readTaskStudentsApiV1StudentTasksGet(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an task.
         * @summary Update Task Student Id
         * @param {number} id 
         * @param {StudentTaskUpdate} studentTaskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTaskStudentIdApiV1StudentTasksIdPut(id: number, studentTaskUpdate: StudentTaskUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTaskStudentIdApiV1StudentTasksIdPut(id, studentTaskUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudentTasksApi - factory interface
 * @export
 */
export const StudentTasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentTasksApiFp(configuration)
    return {
        /**
         * Create new task.
         * @summary Create Task Student
         * @param {StudentTaskCreate} studentTaskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskStudentApiV1StudentTasksPost(studentTaskCreate: StudentTaskCreate, options?: any): AxiosPromise<StudentTask> {
            return localVarFp.createTaskStudentApiV1StudentTasksPost(studentTaskCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an task.
         * @summary Delete Task Student Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskStudentIdApiV1StudentTasksIdDelete(id: number, options?: any): AxiosPromise<StudentTask> {
            return localVarFp.deleteTaskStudentIdApiV1StudentTasksIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get task by ID.
         * @summary Read Task Student Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTaskStudentIdApiV1StudentTasksIdGet(id: number, options?: any): AxiosPromise<StudentTask> {
            return localVarFp.readTaskStudentIdApiV1StudentTasksIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve Tasks.
         * @summary Read Task Students
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTaskStudentsApiV1StudentTasksGet(sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<StudentTask>> {
            return localVarFp.readTaskStudentsApiV1StudentTasksGet(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an task.
         * @summary Update Task Student Id
         * @param {number} id 
         * @param {StudentTaskUpdate} studentTaskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskStudentIdApiV1StudentTasksIdPut(id: number, studentTaskUpdate: StudentTaskUpdate, options?: any): AxiosPromise<StudentTask> {
            return localVarFp.updateTaskStudentIdApiV1StudentTasksIdPut(id, studentTaskUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentTasksApi - object-oriented interface
 * @export
 * @class StudentTasksApi
 * @extends {BaseAPI}
 */
export class StudentTasksApi extends BaseAPI {
    /**
     * Create new task.
     * @summary Create Task Student
     * @param {StudentTaskCreate} studentTaskCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentTasksApi
     */
    public createTaskStudentApiV1StudentTasksPost(studentTaskCreate: StudentTaskCreate, options?: AxiosRequestConfig) {
        return StudentTasksApiFp(this.configuration).createTaskStudentApiV1StudentTasksPost(studentTaskCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an task.
     * @summary Delete Task Student Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentTasksApi
     */
    public deleteTaskStudentIdApiV1StudentTasksIdDelete(id: number, options?: AxiosRequestConfig) {
        return StudentTasksApiFp(this.configuration).deleteTaskStudentIdApiV1StudentTasksIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get task by ID.
     * @summary Read Task Student Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentTasksApi
     */
    public readTaskStudentIdApiV1StudentTasksIdGet(id: number, options?: AxiosRequestConfig) {
        return StudentTasksApiFp(this.configuration).readTaskStudentIdApiV1StudentTasksIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve Tasks.
     * @summary Read Task Students
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentTasksApi
     */
    public readTaskStudentsApiV1StudentTasksGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
        return StudentTasksApiFp(this.configuration).readTaskStudentsApiV1StudentTasksGet(sort, range, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an task.
     * @summary Update Task Student Id
     * @param {number} id 
     * @param {StudentTaskUpdate} studentTaskUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentTasksApi
     */
    public updateTaskStudentIdApiV1StudentTasksIdPut(id: number, studentTaskUpdate: StudentTaskUpdate, options?: AxiosRequestConfig) {
        return StudentTasksApiFp(this.configuration).updateTaskStudentIdApiV1StudentTasksIdPut(id, studentTaskUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudentsApi - axios parameter creator
 * @export
 */
export const StudentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new Student.
         * @summary Create Student
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudentApiV1StudentsPost: async (userCreate: UserCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('createStudentApiV1StudentsPost', 'userCreate', userCreate)
            const localVarPath = `/api/v1/students/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Student.
         * @summary Delete Student Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentIdApiV1StudentsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteStudentIdApiV1StudentsIdDelete', 'id', id)
            const localVarPath = `/api/v1/students/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Student by ID.
         * @summary Read Student Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudentIdApiV1StudentsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readStudentIdApiV1StudentsIdGet', 'id', id)
            const localVarPath = `/api/v1/students/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve Tasks.
         * @summary Read Students
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudentsApiV1StudentsGet: async (sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/students/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Student.
         * @summary Update Student Id
         * @param {number} id 
         * @param {StudentUpdate} studentUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentIdApiV1StudentsIdPut: async (id: number, studentUpdate: StudentUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStudentIdApiV1StudentsIdPut', 'id', id)
            // verify required parameter 'studentUpdate' is not null or undefined
            assertParamExists('updateStudentIdApiV1StudentsIdPut', 'studentUpdate', studentUpdate)
            const localVarPath = `/api/v1/students/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentsApi - functional programming interface
 * @export
 */
export const StudentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new Student.
         * @summary Create Student
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStudentApiV1StudentsPost(userCreate: UserCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Student>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStudentApiV1StudentsPost(userCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Student.
         * @summary Delete Student Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudentIdApiV1StudentsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Student>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudentIdApiV1StudentsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Student by ID.
         * @summary Read Student Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStudentIdApiV1StudentsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Student>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStudentIdApiV1StudentsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve Tasks.
         * @summary Read Students
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStudentsApiV1StudentsGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Student>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStudentsApiV1StudentsGet(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Student.
         * @summary Update Student Id
         * @param {number} id 
         * @param {StudentUpdate} studentUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudentIdApiV1StudentsIdPut(id: number, studentUpdate: StudentUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Student>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudentIdApiV1StudentsIdPut(id, studentUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudentsApi - factory interface
 * @export
 */
export const StudentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentsApiFp(configuration)
    return {
        /**
         * Create new Student.
         * @summary Create Student
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudentApiV1StudentsPost(userCreate: UserCreate, options?: any): AxiosPromise<Student> {
            return localVarFp.createStudentApiV1StudentsPost(userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Student.
         * @summary Delete Student Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentIdApiV1StudentsIdDelete(id: number, options?: any): AxiosPromise<Student> {
            return localVarFp.deleteStudentIdApiV1StudentsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Student by ID.
         * @summary Read Student Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudentIdApiV1StudentsIdGet(id: number, options?: any): AxiosPromise<Student> {
            return localVarFp.readStudentIdApiV1StudentsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve Tasks.
         * @summary Read Students
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudentsApiV1StudentsGet(sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<Student>> {
            return localVarFp.readStudentsApiV1StudentsGet(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Student.
         * @summary Update Student Id
         * @param {number} id 
         * @param {StudentUpdate} studentUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentIdApiV1StudentsIdPut(id: number, studentUpdate: StudentUpdate, options?: any): AxiosPromise<Student> {
            return localVarFp.updateStudentIdApiV1StudentsIdPut(id, studentUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentsApi - object-oriented interface
 * @export
 * @class StudentsApi
 * @extends {BaseAPI}
 */
export class StudentsApi extends BaseAPI {
    /**
     * Create new Student.
     * @summary Create Student
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public createStudentApiV1StudentsPost(userCreate: UserCreate, options?: AxiosRequestConfig) {
        return StudentsApiFp(this.configuration).createStudentApiV1StudentsPost(userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Student.
     * @summary Delete Student Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public deleteStudentIdApiV1StudentsIdDelete(id: number, options?: AxiosRequestConfig) {
        return StudentsApiFp(this.configuration).deleteStudentIdApiV1StudentsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Student by ID.
     * @summary Read Student Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public readStudentIdApiV1StudentsIdGet(id: number, options?: AxiosRequestConfig) {
        return StudentsApiFp(this.configuration).readStudentIdApiV1StudentsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve Tasks.
     * @summary Read Students
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public readStudentsApiV1StudentsGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
        return StudentsApiFp(this.configuration).readStudentsApiV1StudentsGet(sort, range, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Student.
     * @summary Update Student Id
     * @param {number} id 
     * @param {StudentUpdate} studentUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public updateStudentIdApiV1StudentsIdPut(id: number, studentUpdate: StudentUpdate, options?: AxiosRequestConfig) {
        return StudentsApiFp(this.configuration).updateStudentIdApiV1StudentsIdPut(id, studentUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudyGroupCiphersApi - axios parameter creator
 * @export
 */
export const StudyGroupCiphersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new task.
         * @summary Create Study Group Cipher
         * @param {StudyGroupCipherCreate} studyGroupCipherCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudyGroupCipherApiV1StudyGroupCiphersPost: async (studyGroupCipherCreate: StudyGroupCipherCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyGroupCipherCreate' is not null or undefined
            assertParamExists('createStudyGroupCipherApiV1StudyGroupCiphersPost', 'studyGroupCipherCreate', studyGroupCipherCreate)
            const localVarPath = `/api/v1/study_group_ciphers/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyGroupCipherCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an task.
         * @summary Delete Study Group Cipher Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyGroupCipherIdApiV1StudyGroupCiphersIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteStudyGroupCipherIdApiV1StudyGroupCiphersIdDelete', 'id', id)
            const localVarPath = `/api/v1/study_group_ciphers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get task by ID.
         * @summary Read Study Group Cipher Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudyGroupCipherIdApiV1StudyGroupCiphersIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readStudyGroupCipherIdApiV1StudyGroupCiphersIdGet', 'id', id)
            const localVarPath = `/api/v1/study_group_ciphers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve StudyGroupCipher.
         * @summary Read Study Group Ciphers
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudyGroupCiphersApiV1StudyGroupCiphersGet: async (sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/study_group_ciphers/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an task.
         * @summary Update Study Group Cipher Id
         * @param {string} id 
         * @param {StudyGroupCipherUpdate} studyGroupCipherUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudyGroupCipherIdApiV1StudyGroupCiphersIdPut: async (id: string, studyGroupCipherUpdate: StudyGroupCipherUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStudyGroupCipherIdApiV1StudyGroupCiphersIdPut', 'id', id)
            // verify required parameter 'studyGroupCipherUpdate' is not null or undefined
            assertParamExists('updateStudyGroupCipherIdApiV1StudyGroupCiphersIdPut', 'studyGroupCipherUpdate', studyGroupCipherUpdate)
            const localVarPath = `/api/v1/study_group_ciphers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyGroupCipherUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudyGroupCiphersApi - functional programming interface
 * @export
 */
export const StudyGroupCiphersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudyGroupCiphersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new task.
         * @summary Create Study Group Cipher
         * @param {StudyGroupCipherCreate} studyGroupCipherCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStudyGroupCipherApiV1StudyGroupCiphersPost(studyGroupCipherCreate: StudyGroupCipherCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyGroupCipher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStudyGroupCipherApiV1StudyGroupCiphersPost(studyGroupCipherCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an task.
         * @summary Delete Study Group Cipher Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudyGroupCipherIdApiV1StudyGroupCiphersIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyGroupCipher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudyGroupCipherIdApiV1StudyGroupCiphersIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get task by ID.
         * @summary Read Study Group Cipher Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStudyGroupCipherIdApiV1StudyGroupCiphersIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyGroupCipher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStudyGroupCipherIdApiV1StudyGroupCiphersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve StudyGroupCipher.
         * @summary Read Study Group Ciphers
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStudyGroupCiphersApiV1StudyGroupCiphersGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudyGroupCipher>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStudyGroupCiphersApiV1StudyGroupCiphersGet(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an task.
         * @summary Update Study Group Cipher Id
         * @param {string} id 
         * @param {StudyGroupCipherUpdate} studyGroupCipherUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudyGroupCipherIdApiV1StudyGroupCiphersIdPut(id: string, studyGroupCipherUpdate: StudyGroupCipherUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyGroupCipher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudyGroupCipherIdApiV1StudyGroupCiphersIdPut(id, studyGroupCipherUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudyGroupCiphersApi - factory interface
 * @export
 */
export const StudyGroupCiphersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudyGroupCiphersApiFp(configuration)
    return {
        /**
         * Create new task.
         * @summary Create Study Group Cipher
         * @param {StudyGroupCipherCreate} studyGroupCipherCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudyGroupCipherApiV1StudyGroupCiphersPost(studyGroupCipherCreate: StudyGroupCipherCreate, options?: any): AxiosPromise<StudyGroupCipher> {
            return localVarFp.createStudyGroupCipherApiV1StudyGroupCiphersPost(studyGroupCipherCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an task.
         * @summary Delete Study Group Cipher Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyGroupCipherIdApiV1StudyGroupCiphersIdDelete(id: string, options?: any): AxiosPromise<StudyGroupCipher> {
            return localVarFp.deleteStudyGroupCipherIdApiV1StudyGroupCiphersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get task by ID.
         * @summary Read Study Group Cipher Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudyGroupCipherIdApiV1StudyGroupCiphersIdGet(id: string, options?: any): AxiosPromise<StudyGroupCipher> {
            return localVarFp.readStudyGroupCipherIdApiV1StudyGroupCiphersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve StudyGroupCipher.
         * @summary Read Study Group Ciphers
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudyGroupCiphersApiV1StudyGroupCiphersGet(sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<StudyGroupCipher>> {
            return localVarFp.readStudyGroupCiphersApiV1StudyGroupCiphersGet(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an task.
         * @summary Update Study Group Cipher Id
         * @param {string} id 
         * @param {StudyGroupCipherUpdate} studyGroupCipherUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudyGroupCipherIdApiV1StudyGroupCiphersIdPut(id: string, studyGroupCipherUpdate: StudyGroupCipherUpdate, options?: any): AxiosPromise<StudyGroupCipher> {
            return localVarFp.updateStudyGroupCipherIdApiV1StudyGroupCiphersIdPut(id, studyGroupCipherUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudyGroupCiphersApi - object-oriented interface
 * @export
 * @class StudyGroupCiphersApi
 * @extends {BaseAPI}
 */
export class StudyGroupCiphersApi extends BaseAPI {
    /**
     * Create new task.
     * @summary Create Study Group Cipher
     * @param {StudyGroupCipherCreate} studyGroupCipherCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyGroupCiphersApi
     */
    public createStudyGroupCipherApiV1StudyGroupCiphersPost(studyGroupCipherCreate: StudyGroupCipherCreate, options?: AxiosRequestConfig) {
        return StudyGroupCiphersApiFp(this.configuration).createStudyGroupCipherApiV1StudyGroupCiphersPost(studyGroupCipherCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an task.
     * @summary Delete Study Group Cipher Id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyGroupCiphersApi
     */
    public deleteStudyGroupCipherIdApiV1StudyGroupCiphersIdDelete(id: string, options?: AxiosRequestConfig) {
        return StudyGroupCiphersApiFp(this.configuration).deleteStudyGroupCipherIdApiV1StudyGroupCiphersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get task by ID.
     * @summary Read Study Group Cipher Id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyGroupCiphersApi
     */
    public readStudyGroupCipherIdApiV1StudyGroupCiphersIdGet(id: string, options?: AxiosRequestConfig) {
        return StudyGroupCiphersApiFp(this.configuration).readStudyGroupCipherIdApiV1StudyGroupCiphersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve StudyGroupCipher.
     * @summary Read Study Group Ciphers
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyGroupCiphersApi
     */
    public readStudyGroupCiphersApiV1StudyGroupCiphersGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
        return StudyGroupCiphersApiFp(this.configuration).readStudyGroupCiphersApiV1StudyGroupCiphersGet(sort, range, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an task.
     * @summary Update Study Group Cipher Id
     * @param {string} id 
     * @param {StudyGroupCipherUpdate} studyGroupCipherUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyGroupCiphersApi
     */
    public updateStudyGroupCipherIdApiV1StudyGroupCiphersIdPut(id: string, studyGroupCipherUpdate: StudyGroupCipherUpdate, options?: AxiosRequestConfig) {
        return StudyGroupCiphersApiFp(this.configuration).updateStudyGroupCipherIdApiV1StudyGroupCiphersIdPut(id, studyGroupCipherUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudyGroupTasksApi - axios parameter creator
 * @export
 */
export const StudyGroupTasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete an StudyGroupTask.
         * @summary Delete Study Group Discipline Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyGroupDisciplineIdApiV1StudyGroupTasksIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteStudyGroupDisciplineIdApiV1StudyGroupTasksIdDelete', 'id', id)
            const localVarPath = `/api/v1/study_group_tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve StudyGroupTasks.
         * @summary Read Study Group Discipline
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudyGroupDisciplineApiV1StudyGroupTasksGet: async (sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/study_group_tasks/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get StudyGroupTask by ID.
         * @summary Read Study Group Discipline Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudyGroupDisciplineIdApiV1StudyGroupTasksIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readStudyGroupDisciplineIdApiV1StudyGroupTasksIdGet', 'id', id)
            const localVarPath = `/api/v1/study_group_tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an StudyGroupTask.
         * @summary Update Study Group Discipline Id
         * @param {number} id 
         * @param {StudyGroupTaskUpdate} studyGroupTaskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudyGroupDisciplineIdApiV1StudyGroupTasksIdPut: async (id: number, studyGroupTaskUpdate: StudyGroupTaskUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStudyGroupDisciplineIdApiV1StudyGroupTasksIdPut', 'id', id)
            // verify required parameter 'studyGroupTaskUpdate' is not null or undefined
            assertParamExists('updateStudyGroupDisciplineIdApiV1StudyGroupTasksIdPut', 'studyGroupTaskUpdate', studyGroupTaskUpdate)
            const localVarPath = `/api/v1/study_group_tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyGroupTaskUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudyGroupTasksApi - functional programming interface
 * @export
 */
export const StudyGroupTasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudyGroupTasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete an StudyGroupTask.
         * @summary Delete Study Group Discipline Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudyGroupDisciplineIdApiV1StudyGroupTasksIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyGroupTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudyGroupDisciplineIdApiV1StudyGroupTasksIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve StudyGroupTasks.
         * @summary Read Study Group Discipline
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStudyGroupDisciplineApiV1StudyGroupTasksGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudyGroupTask>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStudyGroupDisciplineApiV1StudyGroupTasksGet(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get StudyGroupTask by ID.
         * @summary Read Study Group Discipline Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStudyGroupDisciplineIdApiV1StudyGroupTasksIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyGroupTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStudyGroupDisciplineIdApiV1StudyGroupTasksIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an StudyGroupTask.
         * @summary Update Study Group Discipline Id
         * @param {number} id 
         * @param {StudyGroupTaskUpdate} studyGroupTaskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudyGroupDisciplineIdApiV1StudyGroupTasksIdPut(id: number, studyGroupTaskUpdate: StudyGroupTaskUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyGroupTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudyGroupDisciplineIdApiV1StudyGroupTasksIdPut(id, studyGroupTaskUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudyGroupTasksApi - factory interface
 * @export
 */
export const StudyGroupTasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudyGroupTasksApiFp(configuration)
    return {
        /**
         * Delete an StudyGroupTask.
         * @summary Delete Study Group Discipline Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyGroupDisciplineIdApiV1StudyGroupTasksIdDelete(id: number, options?: any): AxiosPromise<StudyGroupTask> {
            return localVarFp.deleteStudyGroupDisciplineIdApiV1StudyGroupTasksIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve StudyGroupTasks.
         * @summary Read Study Group Discipline
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudyGroupDisciplineApiV1StudyGroupTasksGet(sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<StudyGroupTask>> {
            return localVarFp.readStudyGroupDisciplineApiV1StudyGroupTasksGet(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Get StudyGroupTask by ID.
         * @summary Read Study Group Discipline Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudyGroupDisciplineIdApiV1StudyGroupTasksIdGet(id: number, options?: any): AxiosPromise<StudyGroupTask> {
            return localVarFp.readStudyGroupDisciplineIdApiV1StudyGroupTasksIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an StudyGroupTask.
         * @summary Update Study Group Discipline Id
         * @param {number} id 
         * @param {StudyGroupTaskUpdate} studyGroupTaskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudyGroupDisciplineIdApiV1StudyGroupTasksIdPut(id: number, studyGroupTaskUpdate: StudyGroupTaskUpdate, options?: any): AxiosPromise<StudyGroupTask> {
            return localVarFp.updateStudyGroupDisciplineIdApiV1StudyGroupTasksIdPut(id, studyGroupTaskUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudyGroupTasksApi - object-oriented interface
 * @export
 * @class StudyGroupTasksApi
 * @extends {BaseAPI}
 */
export class StudyGroupTasksApi extends BaseAPI {
    /**
     * Delete an StudyGroupTask.
     * @summary Delete Study Group Discipline Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyGroupTasksApi
     */
    public deleteStudyGroupDisciplineIdApiV1StudyGroupTasksIdDelete(id: number, options?: AxiosRequestConfig) {
        return StudyGroupTasksApiFp(this.configuration).deleteStudyGroupDisciplineIdApiV1StudyGroupTasksIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve StudyGroupTasks.
     * @summary Read Study Group Discipline
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyGroupTasksApi
     */
    public readStudyGroupDisciplineApiV1StudyGroupTasksGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
        return StudyGroupTasksApiFp(this.configuration).readStudyGroupDisciplineApiV1StudyGroupTasksGet(sort, range, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get StudyGroupTask by ID.
     * @summary Read Study Group Discipline Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyGroupTasksApi
     */
    public readStudyGroupDisciplineIdApiV1StudyGroupTasksIdGet(id: number, options?: AxiosRequestConfig) {
        return StudyGroupTasksApiFp(this.configuration).readStudyGroupDisciplineIdApiV1StudyGroupTasksIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an StudyGroupTask.
     * @summary Update Study Group Discipline Id
     * @param {number} id 
     * @param {StudyGroupTaskUpdate} studyGroupTaskUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyGroupTasksApi
     */
    public updateStudyGroupDisciplineIdApiV1StudyGroupTasksIdPut(id: number, studyGroupTaskUpdate: StudyGroupTaskUpdate, options?: AxiosRequestConfig) {
        return StudyGroupTasksApiFp(this.configuration).updateStudyGroupDisciplineIdApiV1StudyGroupTasksIdPut(id, studyGroupTaskUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudyGroupsApi - axios parameter creator
 * @export
 */
export const StudyGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new StudyGroup.
         * @summary Create Study Group
         * @param {StudyGroupCreate} studyGroupCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudyGroupApiV1StudyGroupsPost: async (studyGroupCreate: StudyGroupCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyGroupCreate' is not null or undefined
            assertParamExists('createStudyGroupApiV1StudyGroupsPost', 'studyGroupCreate', studyGroupCreate)
            const localVarPath = `/api/v1/study_groups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyGroupCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an StudyGroup.
         * @summary Delete Study Group Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyGroupIdApiV1StudyGroupsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteStudyGroupIdApiV1StudyGroupsIdDelete', 'id', id)
            const localVarPath = `/api/v1/study_groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve StudyGroups.
         * @summary Read Study Group
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudyGroupApiV1StudyGroupsGet: async (sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/study_groups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get StudyGroup by ID.
         * @summary Read Study Group Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudyGroupIdApiV1StudyGroupsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readStudyGroupIdApiV1StudyGroupsIdGet', 'id', id)
            const localVarPath = `/api/v1/study_groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an StudyGroup.
         * @summary Update Study Group Id
         * @param {string} id 
         * @param {StudyGroupUpdate} studyGroupUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudyGroupIdApiV1StudyGroupsIdPut: async (id: string, studyGroupUpdate: StudyGroupUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStudyGroupIdApiV1StudyGroupsIdPut', 'id', id)
            // verify required parameter 'studyGroupUpdate' is not null or undefined
            assertParamExists('updateStudyGroupIdApiV1StudyGroupsIdPut', 'studyGroupUpdate', studyGroupUpdate)
            const localVarPath = `/api/v1/study_groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyGroupUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudyGroupsApi - functional programming interface
 * @export
 */
export const StudyGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudyGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new StudyGroup.
         * @summary Create Study Group
         * @param {StudyGroupCreate} studyGroupCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStudyGroupApiV1StudyGroupsPost(studyGroupCreate: StudyGroupCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudyGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStudyGroupApiV1StudyGroupsPost(studyGroupCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an StudyGroup.
         * @summary Delete Study Group Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudyGroupIdApiV1StudyGroupsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudyGroupIdApiV1StudyGroupsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve StudyGroups.
         * @summary Read Study Group
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStudyGroupApiV1StudyGroupsGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudyGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStudyGroupApiV1StudyGroupsGet(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get StudyGroup by ID.
         * @summary Read Study Group Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStudyGroupIdApiV1StudyGroupsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStudyGroupIdApiV1StudyGroupsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an StudyGroup.
         * @summary Update Study Group Id
         * @param {string} id 
         * @param {StudyGroupUpdate} studyGroupUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudyGroupIdApiV1StudyGroupsIdPut(id: string, studyGroupUpdate: StudyGroupUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudyGroupIdApiV1StudyGroupsIdPut(id, studyGroupUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudyGroupsApi - factory interface
 * @export
 */
export const StudyGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudyGroupsApiFp(configuration)
    return {
        /**
         * Create new StudyGroup.
         * @summary Create Study Group
         * @param {StudyGroupCreate} studyGroupCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudyGroupApiV1StudyGroupsPost(studyGroupCreate: StudyGroupCreate, options?: any): AxiosPromise<Array<StudyGroup>> {
            return localVarFp.createStudyGroupApiV1StudyGroupsPost(studyGroupCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an StudyGroup.
         * @summary Delete Study Group Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyGroupIdApiV1StudyGroupsIdDelete(id: string, options?: any): AxiosPromise<StudyGroup> {
            return localVarFp.deleteStudyGroupIdApiV1StudyGroupsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve StudyGroups.
         * @summary Read Study Group
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudyGroupApiV1StudyGroupsGet(sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<StudyGroup>> {
            return localVarFp.readStudyGroupApiV1StudyGroupsGet(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Get StudyGroup by ID.
         * @summary Read Study Group Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudyGroupIdApiV1StudyGroupsIdGet(id: string, options?: any): AxiosPromise<StudyGroup> {
            return localVarFp.readStudyGroupIdApiV1StudyGroupsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an StudyGroup.
         * @summary Update Study Group Id
         * @param {string} id 
         * @param {StudyGroupUpdate} studyGroupUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudyGroupIdApiV1StudyGroupsIdPut(id: string, studyGroupUpdate: StudyGroupUpdate, options?: any): AxiosPromise<StudyGroup> {
            return localVarFp.updateStudyGroupIdApiV1StudyGroupsIdPut(id, studyGroupUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudyGroupsApi - object-oriented interface
 * @export
 * @class StudyGroupsApi
 * @extends {BaseAPI}
 */
export class StudyGroupsApi extends BaseAPI {
    /**
     * Create new StudyGroup.
     * @summary Create Study Group
     * @param {StudyGroupCreate} studyGroupCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyGroupsApi
     */
    public createStudyGroupApiV1StudyGroupsPost(studyGroupCreate: StudyGroupCreate, options?: AxiosRequestConfig) {
        return StudyGroupsApiFp(this.configuration).createStudyGroupApiV1StudyGroupsPost(studyGroupCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an StudyGroup.
     * @summary Delete Study Group Id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyGroupsApi
     */
    public deleteStudyGroupIdApiV1StudyGroupsIdDelete(id: string, options?: AxiosRequestConfig) {
        return StudyGroupsApiFp(this.configuration).deleteStudyGroupIdApiV1StudyGroupsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve StudyGroups.
     * @summary Read Study Group
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyGroupsApi
     */
    public readStudyGroupApiV1StudyGroupsGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
        return StudyGroupsApiFp(this.configuration).readStudyGroupApiV1StudyGroupsGet(sort, range, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get StudyGroup by ID.
     * @summary Read Study Group Id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyGroupsApi
     */
    public readStudyGroupIdApiV1StudyGroupsIdGet(id: string, options?: AxiosRequestConfig) {
        return StudyGroupsApiFp(this.configuration).readStudyGroupIdApiV1StudyGroupsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an StudyGroup.
     * @summary Update Study Group Id
     * @param {string} id 
     * @param {StudyGroupUpdate} studyGroupUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyGroupsApi
     */
    public updateStudyGroupIdApiV1StudyGroupsIdPut(id: string, studyGroupUpdate: StudyGroupUpdate, options?: AxiosRequestConfig) {
        return StudyGroupsApiFp(this.configuration).updateStudyGroupIdApiV1StudyGroupsIdPut(id, studyGroupUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new task.
         * @summary Create Task
         * @param {TaskCreate} taskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskApiV1TasksPost: async (taskCreate: TaskCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskCreate' is not null or undefined
            assertParamExists('createTaskApiV1TasksPost', 'taskCreate', taskCreate)
            const localVarPath = `/api/v1/tasks/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an task.
         * @summary Delete Task
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskApiV1TasksIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTaskApiV1TasksIdDelete', 'id', id)
            const localVarPath = `/api/v1/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get task by ID.
         * @summary Read Task
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTaskApiV1TasksIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readTaskApiV1TasksIdGet', 'id', id)
            const localVarPath = `/api/v1/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve Tasks.
         * @summary Read Tasks
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTasksApiV1TasksGet: async (sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tasks/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an task.
         * @summary Update Task
         * @param {number} id 
         * @param {TaskUpdate} taskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskApiV1TasksIdPut: async (id: number, taskUpdate: TaskUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTaskApiV1TasksIdPut', 'id', id)
            // verify required parameter 'taskUpdate' is not null or undefined
            assertParamExists('updateTaskApiV1TasksIdPut', 'taskUpdate', taskUpdate)
            const localVarPath = `/api/v1/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new task.
         * @summary Create Task
         * @param {TaskCreate} taskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskApiV1TasksPost(taskCreate: TaskCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTaskApiV1TasksPost(taskCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an task.
         * @summary Delete Task
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskApiV1TasksIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTaskApiV1TasksIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get task by ID.
         * @summary Read Task
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readTaskApiV1TasksIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readTaskApiV1TasksIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve Tasks.
         * @summary Read Tasks
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readTasksApiV1TasksGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readTasksApiV1TasksGet(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an task.
         * @summary Update Task
         * @param {number} id 
         * @param {TaskUpdate} taskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTaskApiV1TasksIdPut(id: number, taskUpdate: TaskUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTaskApiV1TasksIdPut(id, taskUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * Create new task.
         * @summary Create Task
         * @param {TaskCreate} taskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskApiV1TasksPost(taskCreate: TaskCreate, options?: any): AxiosPromise<Task> {
            return localVarFp.createTaskApiV1TasksPost(taskCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an task.
         * @summary Delete Task
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskApiV1TasksIdDelete(id: number, options?: any): AxiosPromise<Task> {
            return localVarFp.deleteTaskApiV1TasksIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get task by ID.
         * @summary Read Task
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTaskApiV1TasksIdGet(id: number, options?: any): AxiosPromise<Task> {
            return localVarFp.readTaskApiV1TasksIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve Tasks.
         * @summary Read Tasks
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTasksApiV1TasksGet(sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<Task>> {
            return localVarFp.readTasksApiV1TasksGet(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an task.
         * @summary Update Task
         * @param {number} id 
         * @param {TaskUpdate} taskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskApiV1TasksIdPut(id: number, taskUpdate: TaskUpdate, options?: any): AxiosPromise<Task> {
            return localVarFp.updateTaskApiV1TasksIdPut(id, taskUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI {
    /**
     * Create new task.
     * @summary Create Task
     * @param {TaskCreate} taskCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public createTaskApiV1TasksPost(taskCreate: TaskCreate, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).createTaskApiV1TasksPost(taskCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an task.
     * @summary Delete Task
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public deleteTaskApiV1TasksIdDelete(id: number, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).deleteTaskApiV1TasksIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get task by ID.
     * @summary Read Task
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public readTaskApiV1TasksIdGet(id: number, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).readTaskApiV1TasksIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve Tasks.
     * @summary Read Tasks
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public readTasksApiV1TasksGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).readTasksApiV1TasksGet(sort, range, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an task.
     * @summary Update Task
     * @param {number} id 
     * @param {TaskUpdate} taskUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public updateTaskApiV1TasksIdPut(id: number, taskUpdate: TaskUpdate, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).updateTaskApiV1TasksIdPut(id, taskUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeachersApi - axios parameter creator
 * @export
 */
export const TeachersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new Teacher.
         * @summary Create Teacher
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeacherApiV1TeachersPost: async (userCreate: UserCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('createTeacherApiV1TeachersPost', 'userCreate', userCreate)
            const localVarPath = `/api/v1/teachers/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Teacher.
         * @summary Delete Teacher Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeacherIdApiV1TeachersIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTeacherIdApiV1TeachersIdDelete', 'id', id)
            const localVarPath = `/api/v1/teachers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Teacher by ID.
         * @summary Read Teacher Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTeacherIdApiV1TeachersIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readTeacherIdApiV1TeachersIdGet', 'id', id)
            const localVarPath = `/api/v1/teachers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current teacher.
         * @summary Read Teacher Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTeacherMeApiV1TeachersMeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/teachers/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve Tasks.
         * @summary Read Teachers
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTeachersApiV1TeachersGet: async (sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/teachers/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Teacher.
         * @summary Update Teacher Id
         * @param {number} id 
         * @param {TeacherUpdate} teacherUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeacherIdApiV1TeachersIdPut: async (id: number, teacherUpdate: TeacherUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTeacherIdApiV1TeachersIdPut', 'id', id)
            // verify required parameter 'teacherUpdate' is not null or undefined
            assertParamExists('updateTeacherIdApiV1TeachersIdPut', 'teacherUpdate', teacherUpdate)
            const localVarPath = `/api/v1/teachers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeachersApi - functional programming interface
 * @export
 */
export const TeachersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeachersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new Teacher.
         * @summary Create Teacher
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeacherApiV1TeachersPost(userCreate: UserCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teacher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeacherApiV1TeachersPost(userCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Teacher.
         * @summary Delete Teacher Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeacherIdApiV1TeachersIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teacher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeacherIdApiV1TeachersIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Teacher by ID.
         * @summary Read Teacher Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readTeacherIdApiV1TeachersIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teacher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readTeacherIdApiV1TeachersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get current teacher.
         * @summary Read Teacher Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readTeacherMeApiV1TeachersMeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Teacher>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readTeacherMeApiV1TeachersMeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve Tasks.
         * @summary Read Teachers
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readTeachersApiV1TeachersGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Teacher>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readTeachersApiV1TeachersGet(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Teacher.
         * @summary Update Teacher Id
         * @param {number} id 
         * @param {TeacherUpdate} teacherUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeacherIdApiV1TeachersIdPut(id: number, teacherUpdate: TeacherUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teacher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeacherIdApiV1TeachersIdPut(id, teacherUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeachersApi - factory interface
 * @export
 */
export const TeachersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeachersApiFp(configuration)
    return {
        /**
         * Create new Teacher.
         * @summary Create Teacher
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeacherApiV1TeachersPost(userCreate: UserCreate, options?: any): AxiosPromise<Teacher> {
            return localVarFp.createTeacherApiV1TeachersPost(userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Teacher.
         * @summary Delete Teacher Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeacherIdApiV1TeachersIdDelete(id: number, options?: any): AxiosPromise<Teacher> {
            return localVarFp.deleteTeacherIdApiV1TeachersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Teacher by ID.
         * @summary Read Teacher Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTeacherIdApiV1TeachersIdGet(id: number, options?: any): AxiosPromise<Teacher> {
            return localVarFp.readTeacherIdApiV1TeachersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current teacher.
         * @summary Read Teacher Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTeacherMeApiV1TeachersMeGet(options?: any): AxiosPromise<Array<Teacher>> {
            return localVarFp.readTeacherMeApiV1TeachersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve Tasks.
         * @summary Read Teachers
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTeachersApiV1TeachersGet(sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<Teacher>> {
            return localVarFp.readTeachersApiV1TeachersGet(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Teacher.
         * @summary Update Teacher Id
         * @param {number} id 
         * @param {TeacherUpdate} teacherUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeacherIdApiV1TeachersIdPut(id: number, teacherUpdate: TeacherUpdate, options?: any): AxiosPromise<Teacher> {
            return localVarFp.updateTeacherIdApiV1TeachersIdPut(id, teacherUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeachersApi - object-oriented interface
 * @export
 * @class TeachersApi
 * @extends {BaseAPI}
 */
export class TeachersApi extends BaseAPI {
    /**
     * Create new Teacher.
     * @summary Create Teacher
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachersApi
     */
    public createTeacherApiV1TeachersPost(userCreate: UserCreate, options?: AxiosRequestConfig) {
        return TeachersApiFp(this.configuration).createTeacherApiV1TeachersPost(userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Teacher.
     * @summary Delete Teacher Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachersApi
     */
    public deleteTeacherIdApiV1TeachersIdDelete(id: number, options?: AxiosRequestConfig) {
        return TeachersApiFp(this.configuration).deleteTeacherIdApiV1TeachersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Teacher by ID.
     * @summary Read Teacher Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachersApi
     */
    public readTeacherIdApiV1TeachersIdGet(id: number, options?: AxiosRequestConfig) {
        return TeachersApiFp(this.configuration).readTeacherIdApiV1TeachersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current teacher.
     * @summary Read Teacher Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachersApi
     */
    public readTeacherMeApiV1TeachersMeGet(options?: AxiosRequestConfig) {
        return TeachersApiFp(this.configuration).readTeacherMeApiV1TeachersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve Tasks.
     * @summary Read Teachers
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachersApi
     */
    public readTeachersApiV1TeachersGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
        return TeachersApiFp(this.configuration).readTeachersApiV1TeachersGet(sort, range, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Teacher.
     * @summary Update Teacher Id
     * @param {number} id 
     * @param {TeacherUpdate} teacherUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachersApi
     */
    public updateTeacherIdApiV1TeachersIdPut(id: number, teacherUpdate: TeacherUpdate, options?: AxiosRequestConfig) {
        return TeachersApiFp(this.configuration).updateTeacherIdApiV1TeachersIdPut(id, teacherUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new user.
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserApiV1UsersPost: async (userCreate: UserCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('createUserApiV1UsersPost', 'userCreate', userCreate)
            const localVarPath = `/api/v1/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete user.
         * @summary Delete User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserApiV1UsersIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserApiV1UsersIdDelete', 'id', id)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific user.
         * @summary Read User By Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUserByIdApiV1UsersIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readUserByIdApiV1UsersIdGet', 'id', id)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current user.
         * @summary Read User Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUserMeApiV1UsersMeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve users.
         * @summary Read Users
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersApiV1UsersGet: async (sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve users.
         * @summary Read Users By Role Id
         * @param {string} rolname 
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersByRoleIdApiV1UsersRoleRolnameGet: async (rolname: string, sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rolname' is not null or undefined
            assertParamExists('readUsersByRoleIdApiV1UsersRoleRolnameGet', 'rolname', rolname)
            const localVarPath = `/api/v1/users/role/{rolname}`
                .replace(`{${"rolname"}}`, encodeURIComponent(String(rolname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a user.
         * @summary Update User
         * @param {number} id 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserApiV1UsersIdPut: async (id: number, userUpdate: UserUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUserApiV1UsersIdPut', 'id', id)
            // verify required parameter 'userUpdate' is not null or undefined
            assertParamExists('updateUserApiV1UsersIdPut', 'userUpdate', userUpdate)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update own user.
         * @summary Update User Me
         * @param {BodyUpdateUserMeApiV1UsersMePut} [bodyUpdateUserMeApiV1UsersMePut] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserMeApiV1UsersMePut: async (bodyUpdateUserMeApiV1UsersMePut?: BodyUpdateUserMeApiV1UsersMePut, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyUpdateUserMeApiV1UsersMePut, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new user.
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserApiV1UsersPost(userCreate: UserCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserApiV1UsersPost(userCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete user.
         * @summary Delete User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserApiV1UsersIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserApiV1UsersIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific user.
         * @summary Read User By Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readUserByIdApiV1UsersIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readUserByIdApiV1UsersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get current user.
         * @summary Read User Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readUserMeApiV1UsersMeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readUserMeApiV1UsersMeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve users.
         * @summary Read Users
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readUsersApiV1UsersGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readUsersApiV1UsersGet(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve users.
         * @summary Read Users By Role Id
         * @param {string} rolname 
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readUsersByRoleIdApiV1UsersRoleRolnameGet(rolname: string, sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readUsersByRoleIdApiV1UsersRoleRolnameGet(rolname, sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a user.
         * @summary Update User
         * @param {number} id 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserApiV1UsersIdPut(id: number, userUpdate: UserUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserApiV1UsersIdPut(id, userUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update own user.
         * @summary Update User Me
         * @param {BodyUpdateUserMeApiV1UsersMePut} [bodyUpdateUserMeApiV1UsersMePut] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserMeApiV1UsersMePut(bodyUpdateUserMeApiV1UsersMePut?: BodyUpdateUserMeApiV1UsersMePut, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserMeApiV1UsersMePut(bodyUpdateUserMeApiV1UsersMePut, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Create new user.
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserApiV1UsersPost(userCreate: UserCreate, options?: any): AxiosPromise<User> {
            return localVarFp.createUserApiV1UsersPost(userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete user.
         * @summary Delete User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserApiV1UsersIdDelete(id: number, options?: any): AxiosPromise<User> {
            return localVarFp.deleteUserApiV1UsersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific user.
         * @summary Read User By Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUserByIdApiV1UsersIdGet(id: number, options?: any): AxiosPromise<User> {
            return localVarFp.readUserByIdApiV1UsersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current user.
         * @summary Read User Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUserMeApiV1UsersMeGet(options?: any): AxiosPromise<User> {
            return localVarFp.readUserMeApiV1UsersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve users.
         * @summary Read Users
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersApiV1UsersGet(sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<User>> {
            return localVarFp.readUsersApiV1UsersGet(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve users.
         * @summary Read Users By Role Id
         * @param {string} rolname 
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersByRoleIdApiV1UsersRoleRolnameGet(rolname: string, sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<User>> {
            return localVarFp.readUsersByRoleIdApiV1UsersRoleRolnameGet(rolname, sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a user.
         * @summary Update User
         * @param {number} id 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserApiV1UsersIdPut(id: number, userUpdate: UserUpdate, options?: any): AxiosPromise<User> {
            return localVarFp.updateUserApiV1UsersIdPut(id, userUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Update own user.
         * @summary Update User Me
         * @param {BodyUpdateUserMeApiV1UsersMePut} [bodyUpdateUserMeApiV1UsersMePut] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserMeApiV1UsersMePut(bodyUpdateUserMeApiV1UsersMePut?: BodyUpdateUserMeApiV1UsersMePut, options?: any): AxiosPromise<User> {
            return localVarFp.updateUserMeApiV1UsersMePut(bodyUpdateUserMeApiV1UsersMePut, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Create new user.
     * @summary Create User
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUserApiV1UsersPost(userCreate: UserCreate, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUserApiV1UsersPost(userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete user.
     * @summary Delete User
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUserApiV1UsersIdDelete(id: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUserApiV1UsersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific user.
     * @summary Read User By Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public readUserByIdApiV1UsersIdGet(id: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).readUserByIdApiV1UsersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current user.
     * @summary Read User Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public readUserMeApiV1UsersMeGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).readUserMeApiV1UsersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve users.
     * @summary Read Users
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public readUsersApiV1UsersGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).readUsersApiV1UsersGet(sort, range, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve users.
     * @summary Read Users By Role Id
     * @param {string} rolname 
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;id\&quot;: 0}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public readUsersByRoleIdApiV1UsersRoleRolnameGet(rolname: string, sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).readUsersByRoleIdApiV1UsersRoleRolnameGet(rolname, sort, range, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a user.
     * @summary Update User
     * @param {number} id 
     * @param {UserUpdate} userUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserApiV1UsersIdPut(id: number, userUpdate: UserUpdate, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUserApiV1UsersIdPut(id, userUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update own user.
     * @summary Update User Me
     * @param {BodyUpdateUserMeApiV1UsersMePut} [bodyUpdateUserMeApiV1UsersMePut] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserMeApiV1UsersMePut(bodyUpdateUserMeApiV1UsersMePut?: BodyUpdateUserMeApiV1UsersMePut, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUserMeApiV1UsersMePut(bodyUpdateUserMeApiV1UsersMePut, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UtilsApi - axios parameter creator
 * @export
 */
export const UtilsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Test Celery worker.
         * @summary Test Celery
         * @param {Msg} msg 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCeleryApiV1UtilsTestCeleryPost: async (msg: Msg, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'msg' is not null or undefined
            assertParamExists('testCeleryApiV1UtilsTestCeleryPost', 'msg', msg)
            const localVarPath = `/api/v1/utils/test-celery/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(msg, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilsApi - functional programming interface
 * @export
 */
export const UtilsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilsApiAxiosParamCreator(configuration)
    return {
        /**
         * Test Celery worker.
         * @summary Test Celery
         * @param {Msg} msg 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCeleryApiV1UtilsTestCeleryPost(msg: Msg, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Msg>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testCeleryApiV1UtilsTestCeleryPost(msg, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilsApi - factory interface
 * @export
 */
export const UtilsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilsApiFp(configuration)
    return {
        /**
         * Test Celery worker.
         * @summary Test Celery
         * @param {Msg} msg 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCeleryApiV1UtilsTestCeleryPost(msg: Msg, options?: any): AxiosPromise<Msg> {
            return localVarFp.testCeleryApiV1UtilsTestCeleryPost(msg, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilsApi - object-oriented interface
 * @export
 * @class UtilsApi
 * @extends {BaseAPI}
 */
export class UtilsApi extends BaseAPI {
    /**
     * Test Celery worker.
     * @summary Test Celery
     * @param {Msg} msg 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsApi
     */
    public testCeleryApiV1UtilsTestCeleryPost(msg: Msg, options?: AxiosRequestConfig) {
        return UtilsApiFp(this.configuration).testCeleryApiV1UtilsTestCeleryPost(msg, options).then((request) => request(this.axios, this.basePath));
    }
}


